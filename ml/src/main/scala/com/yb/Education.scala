package com.yb

import org.apache.spark.ml.classification.LogisticRegression
import org.apache.spark.ml.feature.Word2Vec
import org.apache.spark.mllib.util.MLUtils

//import org.apache.spark.ml

object Education {

  case class Record(recordid: String,
                    datasetid: String,
                    record_timestamp: String,
                    fields: Fields)

  case class Fields(taille_d_entreprise: String,
                    indicateur: String,
                    type_de_personnel: String,
                    code_indicateur: String,
                    zone_geographique: String,
                    code_type_pers: String,
                    annee: String,
                    code_zone_geo: String,
                    valeur: String,
                    etat_des_donnees: String,
                    code_taille: String,
                    non_disponible: String
                   )

  def main(args: Array[String]): Unit = {
    import org.apache.spark.sql.SparkSession
    val spark = SparkSession.builder
      .appName("My Spark Application") // optional and will be autogenerated if not specified
      .master("local[*]") // only for demo and testing purposes, use spark-submit instead
      //.enableHiveSupport()              // self-explanatory, isn't it?
      .config("spark.sql.warehouse.dir", "target/spark-warehouse")
      .getOrCreate()
    import spark.implicits._
    val ds = spark
      .read
      .option("multiLine", true)
      .json("C:\\Users\\MonMien\\IdeaProjects\\sandbox\\ml\\src\\main\\resources\\input.json")
      .as[Record]
    val flat = ds.select($"recordid", $"datasetid", $"fields.*")
    flat.show()
    //flat.write.saveAsTable("educ")
    val word2vec = new Word2Vec()
    word2vec.fit(flat)
    val data = MLUtils.convertVectorColumnsToML(flat)
    //data.write.format("libsvm").save("data/foo")
    val lr = new LogisticRegression()
      .setMaxIter(10)
      .setRegParam(0.3)
      .setElasticNetParam(0.8)

    val lrModel = lr.fit(data)
    // Print the coefficients and intercept for logistic regression
    println(s"Coefficients: ${lrModel.coefficients} Intercept: ${lrModel.intercept}")

  }
}
